# Media & Asset Management System Setup Guide

This guide covers the configuration and integration of Bunny.net and Cloudinary for our **Media & Asset Management System**. The setup includes:
- **Storage Zones** for different types of media
- **Pull Zones** for optimized content delivery
- **Video Libraries** for hosting and streaming videos
- **Cloudinary Integration** for image transformations

---
## üèóÔ∏è **1. Storage Zones Setup (Bunny.net)**
We created different **Storage Zones** in Bunny.net to separate and organize different types of assets.

| Storage Zone | Purpose | Tier | Replication |
|-------------|---------|------|------------|
| **archived-media** | Old and non-active assets | Standard HDD | None |
| **branding-assets** | Logos, banners, and corporate branding materials | Edge SSD | None |
| **listing-media** | Media related to property listings (including videos) | Edge SSD | Replicated |
| **marketing-media** | Media for marketing campaigns (not linked to specific listings) | Edge SSD | Replicated |
| **ui-assets** | Assets used in internal tools and UI components | Edge SSD | None |

**Important Notes:**
- **Archived Media** is stored on HDD for cost-efficiency since it's rarely accessed.
- **Listing Media & Marketing Media** are **replicated** across multiple regions to ensure fast loading speeds.
- **Branding & UI Assets** are SSD-based but not replicated, since they're lightweight and less frequently updated.

---
## üöÄ **2. Pull Zones Setup (Bunny.net CDN)**
To serve our assets efficiently, we configured **Pull Zones** for each storage type.

| Pull Zone | Purpose | Region Pricing |
|-------------|----------------|----------------|
| **listing-media** | Serves property listing images and videos | Global (Standard CDN) |
| **marketing-media** | Serves marketing images, email images, and campaign assets | Global (Standard CDN) |
| **branding-assets** | Serves corporate branding assets (logos, etc.) | Global (Standard CDN) |
| **ui-assets** | Serves UI elements and images for internal tools | Global (Standard CDN) |

**Pull Zones allow for:**
- Fast global distribution using **Bunny.net CDN**.
- **Optimized caching** to reduce repeated requests.
- Secure **Signed URLs** when required.

---
## üé• **3. Video Libraries (Bunny.net Stream)**
For video streaming, we created **Video Libraries** in Bunny.net instead of using Storage Zones.

| Video Library | Purpose |
|--------------|---------|
| **listing-videos** | Videos associated with property listings |
| **marketing-videos** | Videos used for marketing campaigns |

### üõ†Ô∏è **Advantages of Video Libraries:**
- **Adaptive Streaming**: Videos are automatically encoded into multiple resolutions.
- **Built-in Player**: Bunny provides an embeddable, optimized video player.
- **Lower Bandwidth Costs**: Videos are streamed efficiently instead of full-file downloads.

---
## üé® **4. Bunny Optimizer & Image Classes**
To optimize images on the fly, we set up **Bunny Optimizer** with predefined **Image Classes**.

| Class Name | Width | Height | Quality | Format |
|-----------|------|------|--------|--------|
| **thumbnail** | 300px | 200px | Auto | WebP |
| **medium** | 800px | Auto | 80% | WebP |
| **highres** | 1920px | Auto | 90% | WebP |
| **email** | 600px | Auto | 70% | WebP |
| **social** | 1200px | 630px | 85% | WebP |

**Optimizer Features Enabled:**
- **WebP Compression** for reduced file sizes.
- **Smart Image Optimization** for desktop & mobile.
- **Dynamic Image API** to resize, crop, and sharpen images on demand.
- **Force Transformation Class** disabled (allows manual resizing when needed).

---
## ‚òÅÔ∏è **5. Cloudinary Integration (For Image Processing)**
Cloudinary is used **only for advanced image transformations** that Bunny Optimizer cannot handle.

### üîë **Environment Variables for Cloudinary**
Set these values in your `.env` file:
```
CLOUDINARY_CLOUD_NAME=your-cloud-name
CLOUDINARY_API_KEY=your-api-key
CLOUDINARY_API_SECRET=your-api-secret
CLOUDINARY_URL=cloudinary://your-api-key:your-api-secret@your-cloud-name
```

### üìå **How Cloudinary Fits Into the Workflow:**
1. **Initial Upload** ‚Üí Bunny.net Storage
2. **Selection & Approval** ‚Üí Agents review in Airtable
3. **Processing** ‚Üí Cloudinary (only if needed for AI-enhanced edits, watermarking, etc.)
4. **Final Hosting** ‚Üí Bunny.net Storage/CDN

---
## üîê **6. Security & API Keys**
All storage zones, video libraries, and Cloudinary are accessed via **secure API keys**.

### **Bunny.net API Keys**
```
BUNNY_API_KEY=your-api-key
BUNNY_STORAGE_LISTING_MEDIA_PASSWORD=your-password
BUNNY_STORAGE_MARKETING_MEDIA_PASSWORD=your-password
BUNNY_STORAGE_BRANDING_ASSETS_PASSWORD=your-password
BUNNY_STORAGE_UI_ASSETS_PASSWORD=your-password
BUNNY_STORAGE_ARCHIVED_MEDIA_PASSWORD=your-password
```

### **Bunny Video Library Keys**
```
BUNNY_LISTING_VIDEOS_LIB_ID=your-library-id
BUNNY_LISTING_VIDEOS_API_KEY=your-api-key
BUNNY_MARKETING_VIDEOS_LIB_ID=your-library-id
BUNNY_MARKETING_VIDEOS_API_KEY=your-api-key
```

### **Cloudinary API Keys**
```
CLOUDINARY_CLOUD_NAME=your-cloud-name
CLOUDINARY_API_KEY=your-api-key
CLOUDINARY_API_SECRET=your-api-secret
```

### **Airtable PATs**
```
AIRTABLE_MEDIA_BASE_ID=
AIRTABLE_MEDIA_ASSETS_TABLE_ID=
```

---
## üîÑ **7. Future Improvements & Considerations**
- **Automated Archiving**: Move old/unpublished media to `archived-media` automatically.
- **Cache Control & Expiry Policies**: Fine-tune caching for different asset types.
- **Signed URL Authentication**: Restrict access to internal tools & sensitive assets.
- **User-Level Access Restrictions**: Implement permissions based on agent roles.

---
## üéØ **Conclusion**
This setup ensures:
‚úÖ **Optimized Storage & Distribution** via Bunny.net CDN.
‚úÖ **Cost-Effective Video Streaming** with Bunny.net Stream.
‚úÖ **On-Demand Image Processing** using Bunny Optimizer & Cloudinary.
‚úÖ **Scalability & Security** with API authentication & storage policies.

This guide should serve as a **complete reference** for setting up and maintaining the **Media & Asset Management System**.



Implementation guide:

Media & Marketing Asset Management System Implementation Schema
This schema outlines all the files we'll create, their purposes, and how they interconnect to form a complete media management solution for your Real Estate Command Center.


Core Infrastructure Layer

Configuration & Types 

app/lib/media/types.ts [DONE]

Contains all TypeScript interfaces and types
Defines MediaAsset, MediaUploadOptions, TransformationOptions, etc.
Used throughout the entire media system for type consistency
'''

app/lib/media/config.ts [DONE]

Centralizes configuration settings
Includes Bunny.net, Cloudinary, and general media settings
Loads environment variables and provides defaults
'''


Service Layer

app/lib/media/storageService.ts [DONE]

Handles direct interaction with Bunny.net
Manages file uploads, deletions, and storage operations
Generates signed URLs for private assets
'''

app/lib/media/transformationService.ts [DONE]

Interfaces with Cloudinary
Handles image transformations (resize, format conversion, etc.)
Optimizes images for web delivery
'''

app/lib/media/databaseService.ts [DONE]

Integrates with Airtable for asset metadata storage
Manages CRUD operations for media assets
Handles querying and filtering assets
'''

app/lib/media/mediaServiceNew.ts [DONE]

High-level facade that orchestrates the other services
Provides a unified API for frontend components
Handles complex operations that span multiple services
'''


API Layer

app/api/media/upload/route.ts  [DONE]

Handles multipart form uploads
Processes files and metadata
Returns asset information to the client
'''

app/api/media/assets/route.ts 

Lists and filters media assets
Supports pagination, search, and folder filtering
Returns asset metadata to the client
'''

app/api/media/transform/route.ts

On-demand image transformations
Handles resize, crop, format conversion requests
Returns transformed image URLs
'''

app/api/media/signed-url/route.ts

Generates temporary signed URLs for private assets
Implements expiration and access controls
Validates requester's permissions
'''

app/api/media/delete/route.ts [DONE]

Handles asset deletion requests
Removes from storage and database
Validates permissions before deletion
'''


UI Components Layer

components/ui/my_components/media/MediaProvider.tsx

Context provider for global media state
Manages recent assets, selections, and uploads
Provides hooks for components to access media functionality
'''

components/ui/my_components/media/MediaUploader.tsx

Drag-and-drop file uploader
Handles single and multi-file uploads
Shows progress, errors, and success states
'''

components/ui/my_components/media/MediaBrowser.tsx

Grid/list view of media assets
Supports filtering, sorting, and search
Enables asset selection for forms
'''

components/ui/my_components/media/MediaPreview.tsx

Image/file preview component
Handles different file types appropriately
Shows metadata and actions for assets
'''

components/ui/my_components/media/MediaSelect.tsx

Form field for media selection
Integrates with existing form libraries
Supports single and multiple selections
'''

components/ui/my_components/media/MediaCard.tsx

Card component for displaying a single asset
Shows thumbnail, name, and quick actions
Used in grids and lists
'''


Integration Components

components/ui/my_components/media/PropertyMediaManager.tsx

Specialized media manager for property listings
Organizes images by type (exterior, interior, etc.)
Sets featured images and order
'''

components/ui/my_components/media/MarketingAssetSelector.tsx

Component for selecting marketing materials
Filters by relevance to marketing context
Groups assets by campaigns or types
'''


Page Components

app/media-library/page.tsx

Full media library management page
Advanced filtering, sorting, and batch operations
Admin capabilities for system-wide assets
'''

app/media-library/upload/page.tsx

Dedicated upload page with advanced options
Batch metadata editing
Post-upload organization tools
'''


Utility Files

app/lib/media/utils.ts

Helper functions for media operations
File type detection, size formatting, etc.
Shared utilities across the media system
'''

app/lib/media/hooks.ts

Custom React hooks for media functionality
useMediaUpload, useMediaBrowser, etc.
Simplifies component integration
'''


Interconnection Flow

User Interaction Flow:

User interacts with MediaUploader/MediaBrowser components
Components use MediaProvider context or direct API calls
API routes process requests and invoke service layer
Services coordinate operations across storage, transformation, and database
Results flow back to UI components via API responses


Asset Upload Flow:

MediaUploader component ‚Üí /api/media/upload route
Route calls mediaService.uploadMedia()
mediaService coordinates:

storageService to handle file upload to Bunny.net
transformationService to create optimized versions
databaseService to store metadata in Airtable


Response returns to component with asset info


Asset Browsing Flow:

MediaBrowser component ‚Üí /api/media/assets route
Route calls databaseService.getAssets()
Results returned to component for display
Component renders assets using MediaCard components


Image Transformation Flow:

Component requests transformation via mediaService
transformationService processes via Cloudinary
Optimized image URL returned to component


Integration with Forms:

Form components use MediaSelect for asset selection
Selection stored in form state
On submission, asset IDs/URLs included in form data